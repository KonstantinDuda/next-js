import Link from "next/link";
import React from "react";
import PostsCode from "./posts_code";
import BlogPageCode from "./blog_page_code";

export default function Page() {
    return (
        <>
            <h1><Link href="./english"> English draft </Link></h1>
            <div>
                Цей розділ - моя нова спроба вчити англійську самостійно. Планую створити тут
                словник і записувати туди слова що я буду зустрічати, які я ще не
                запам&#39;ятав. Також планую записувати ідіоми і вести щось подібне до блогу,
                де я буду описувати що саме я слухав або читав по темі. Почав зі створення
                теки <b>english</b> в <b>app</b>, створив там <i>page.tsx</i> (цей файл). В
                теці <b>menu</b> додав необхідні посилання в
                файлах <i>menu.tsx</i> і <i>side-menu.tsx</i>. В <i>side-menu.tsx</i> створив
                функцію <b>EnglishLinks</b> (поки що вона повертає пустий масив). Планую
                також створити підтеки зі словником та блогом. Як створити теку для блогу
                я бачив в окремому підручнику, та
                зараз <a href="
                https://nextjs.org/docs/app/api-reference/file-conventions/dynamic-routes"
                    rel="noreferrer" target="_blank">я спробую
                    цей метод</a>. Я створив теку з назвою в квадратних лапках. В ній створив
                файл <i>page.tsx</i>. Далі купа інформації про те як можна ще це розширити,
                але зовсім немає інформації як цим користуватись... І навіщо взагалі мені
                динамічні роутери. Можливо я обрав хибний метод реалізації блогу про
                вивчення англійської. І можна було реалізувати все так я я це робив з усіма
                попередніми сторінками. Та я хотів навчитись цього і розібратись в тому в
                яких випадках це корисно, тож пошукаю той підручник. Зрештую
                знайшов <a href="https://nextjs.org/docs/app/getting-started/layouts-and-pages"
                    rel="noreferrer" target="_blank">такий
                    підручник</a>. Для навігації використовується Link в такому вигляді:
                <div className="myCode">
                    &#60;Link href=&#123;&#96;&#47;english&#47;&#36;&#123;post.slug&#125;
                    &#96;&#125;&#62;&#123;post.title&#125;&#60;&#47;Link&#62;
                </div>
                Я вже думав про те що постів в блозі може бути багато, отже потрібно щось
                подібне до лінивого завантаження, щоб спочатку завантажувалось лиш кілка
                свіжих постів і вони одразу показувались користувачу, а потім вже
                завантажувались решта, можливо навіть тільки на запит користувача, а не
                одразу. Схоже
                що <a href="https://nextjs.org/docs/app/getting-started/linking-and-navigating#streaming"
                    rel="noreferrer" target="_blank">streaming
                </a> може мені з цим допомогти. Для початку пропонують створити
                сторінку-заглушку <i>loading.tsx</i>, яка буде відображатись поки
                завантажується основний контент. Але в прикладі вона створюється на рівні
                теки dashboard, тож я пропущу цей крок. Може створю подібну заглушку пізніше,
                на рівні саме цієї теки. Посилання на динамічні сторінки варто помітити
                як ті що не повинні рендеретись заздалегідь, адже данні на них потребують
                відповіді від сервера. Це можна зробити за допомогою <b>prefetch =
                    &#123;false&#125;</b> в Link.
                В підручнику є пояснення про
                те <a href="https://nextjs.org/learn/pages-router/assets-metadata-css-third-party-javascript"
                    rel="noreferrer" target="_blank"> як
                    підключити сторонній скрипт</a>, на прикладі facebook sdk. <br />
                Про альтернативи модулям CSS можна
                дізнатись <a href="https://nextjs.org/learn/pages-router/assets-metadata-css-styling-tips"
                    rel="noreferrer" target="_blank"> в
                    цьому ж підручнику</a>. <br />
                Наразі мій словник - це файл в якому є інтерфейс і масив данних які виводяться в
                таблицю. Можливо варто перенести таблицю в БД, коли вже вона у мене тут підключена.
                З 19 розділу починається те заради чого я продовжив вчитись саме за цим
                підручником. За підручником програма буде читати локальні файли типу md (markdown).
                Статична генерація сторінки з данними з файлів, як в моєму випадку, виконується
                за допомогою <a href="https://nextjs.org/learn/pages-router/data-fetching-with-data#static-generation-with-data-using-getstaticprops"
                    rel="noreferrer" target="_blank">getStaticProps</a>. 25 розділ мене збентежив
                трохи. У мене інша структура проекту, тож і файлів <i>index.js</i> у мене немає.
                Думаю, в моєму випадку це просто <i>page.tsx</i> в теці <i>blog</i>. Адже саме
                там я вже виводжу список постів. Загалом <i>getStaticProps</i> у мене і не працює,
                тому-що я вписую блог в свій проект що реалізований інакше з самого початку.
                Помилка повідомяє що в .app він не працює. Тож я вивів данні інакше. Зараз це
                має такий вигляд:
                <h3><Link href="./english">Файл: english/page.tsx - поточна сторінка</Link></h3>
                <h3>Файл: english/posts.tsx</h3>
                <PostsCode />
                <h3><Link href="./english/blog">Файл: english/blog.tsx</Link></h3>
                <BlogPageCode />
                Схоже що шлях до теки варто передавати в <i>posts.tsx</i> щоб мати можливість
                читати з різних тек. Я не хотів би мати всі файли-пости в одній теці.
                Хотів би розділяти їх на категорії. <br />
                <a href="https://nextjs.org/learn/pages-router/data-fetching-getstaticprops-details"
                    rel="noreferrer" target="_blank">getStaticProps</a> - Рекомендовано використовуєти
                завжди коли це можливо. Читає данні і створює сторінку вже з ними. Тобто
                данні для всіх користувачів будуть однакові, подані перед тим як сайт був
                зібраний. Не підходить для динамічних данних, які часто змінюються. <br />
                <a href="https://nextjs.org/learn/pages-router/data-fetching-request-time"
                    rel="noreferrer" target="_blank">Server-side rendering</a> - Виконується на
                сервері при кожному запиті. Підходить для динамічних данних, які часто змінюються.
                Але збільшує час відповіді сервера. <br />
                Наступний розділ що здавався мені потрібним, нічого нас не вчить. Має кілька
                посилань що ніяк не пов&#39;язані зі всіма розділами до нього і тому я не розумію
                як прикласти його до того що у мене вже є. Та інформацію про це можна знайти
                в <a href="https://nextjs.org/learn/pages-router/dynamic-routes-page-path-external-data"
                    rel="noreferrer" target="_blank">30 розділі</a>. Але тут динамічна
                сторінка (не впевнений що такий термін існує). А не тека, як в посиланнях
                в одній з попередніх глав. <br />
                За результатами 30, 31 та 32 глав я отримав помилку про те що getStaticProps
                не працює в .арр. [eng_blog] я видалив. Також видалив [id].tsx. <br />
                В 33 розділі є пояснення як отримати данні з маркдавн файла. <br />
                Подібний підхід був би корисним, адже достатньо було би створювати маркдавн файли
                в певній теці, а сайт сам би їх зчитував і видавав. Варто було б вивчити
                бібліотеку яка переробляє маркдавн файли в штмл, щоб робити пости гарними.
                Але я отримую регулярні помилки пов&#39;язані з тим що getStaticProps не працює
                в .app. Тож я просто створюватиму файли tsx та вписуватиму їх в файл блогу,
                нові над старими івсе. Таким чином я просто буду користуватись знаннями HTML та
                CSS щоб блог був візуально інформативним, грубо кажучи. <br />
                <Link href="./english/blog">Блог</Link>


            </div>
            <h3><Link href=".">Повернутись на головну сторінку</Link></h3>
        </>
    );
}