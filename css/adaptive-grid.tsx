import Link from "next/link";
import React from "react";
import GridExamples from "./grid-examples";

export default function AdaptiveGrid() {
    return (
        <>
        <h2 id="AdaptiveCSS">Адаптивний дизайн</h2>
            З підручника про <a 
            href="https://w3schoolsua.github.io/css/css_rwd_intro.html#gsc.tab=0"> адаптивний 
            веб дизайн</a> дізнався що бажано писати сайт для мобільних пристроїв, 
            а потім адаптувати його для інших. Звучить логічно, щоб не робити зайві медіа 
            запити на малих і слабших пристроях. Але як і зазначав раніше, з реалізіціями 
            через float я не згоден! Та якщо робити сайт для мобільних то можна зробити його 
            залежним від орієнтації пристрою, одне налаштування для вертикально орієнтованого 
            пристрою і інше для горизонтального. Цікаво що ще до того як прочитав цей розділ я 
            вже написав модуль для списку зверху саме за таким принципом... Там ще межею 
            названа ширина в 768px, хоча в уроці про медіа запити така ширина не 
            згадувалась. Там були 992 і 600... Далі нам порадять орієнтуватись на пристрої: 
            width &#60; 600, 768 &#62; width &#62; 600, 1200 &#62; width &#62; 992 та 
            width &#62; 1200px. В свою чергу якщо я вмикаю в Chrome інструмент розробника і 
            вмикаю режим перегляду на телефоні то ширина стає на 420px, а висота 866px. 
            Але є інша проблема. Якщо переключити на горизонтальну орієнтацію пристрою, то цей 
            текст не поміщається 
            в одну ширину екрану і щоб його читати доводиться водити з ліва в право і назад, а 
            мені це дуже не подобається! Перезавантаження програми вирішило цю проблему!
             Для зображень, окрім <Link href="/html#HtmlPictures">описаних
            в html</Link> методів, як наприклад picture в данному підручнику я нічого цікавого 
            не побачив. Там ще трохи інформації про відео, але прям зовсім трохи. Потім про 
            фреймворки. І шаблони. <br />
            <h3>&#8195; <a href="https://w3schoolsua.github.io/css/css_grid_en.html#gsc.tab=0">
            Підручник по Grid</a></h3>
            <b>Батьківський елемент:</b> <br />
            <ins>display</ins> встанавити на <i>grid</i> щоб користоватись. Можна налаштувати 
            проміжки між рядами і колонками за допомогою <ins>gap</ins> або окремо <ins>
            row-gap</ins> - між рядами та <ins>column-gap</ins> - між колонками. <ins>
            grid-template-columns</ins> - визначає кількість стовпців та співвідношення їх 
            ширин. <ins>grid-template-rows</ins> - визначає висоту для рядків (думаю що 
            автоматично вона буде відповідати елементу рядка з найбільшим вмістом і як на 
            мене це кращий варіант якщо немає обмежень). <ins>justify-content</ins> - 
            використовується для вирівнювання всієї сітки всередині контейнера. І в цьому і в 
            наступному випадку контейнер має бути більше за вміст! Властивості: <i>
            space-evently</i>, <i>space-around</i>, <i>space-between</i>, <i>center</i>, <i>
            start</i>, <i>end</i>. <ins>align-content</ins> - для вертикального вирівнювання 
            сітки в контейнері.  Властивості: <i>space-evently</i>, <i>space-around</i>, <i>
            space-between</i>, <i>center</i>, <i>start</i>, <i>end</i>. 
            <br />
            <b>Дочірні елементи:</b> <br />
            Дочірній елемент може займати кілька комірок, для цього можна встановити початкове
            і кінцеве значеня комірок що він буде займати. <ins>grid-row-start</ins> та <ins>
            grid-row-end</ins> - для рядків, <ins>grid-column-start</ins> та <ins>grid-column-end
            </ins> - для колонок. Або їх скорочені версії <ins>grid-row</ins> <ins>grid-column
            </ins> - значення яким пишуться через косу лінію /. Також в данному випадку кінцеве 
            значення можна замінити довжиною чи висотою що буде займати комірка, за допомогою <i>
            span</i>. <ins>grid-area</ins> - може замінити grid-row-start, grid-column-start, 
            grid-row-end та grid-column-end у вказаній послідовності. також його можна 
            використати для призначеня імені елементам сітки. до іменованих елементів можна 
            посилатись за допомогою <ins>grid-template-areas</ins>, імена вказуються списками 
            рядків в одинарних лапках через пробіл, списки розділяються пробілами, елементи 
            без назв позначаються крапками. За допомогою grid-area ще і послідовність 
            визначається, так само через косу лінію і це вже мене плутає! Доведеться щось 
            наглядне робити... <br /> 
            Мені не подобається те як я зараз користуюсь CSS, але я не 
            знаю як це робити інакше! Хоча я вже побачив SASS і воно виглядає як дуже хороший 
            інструмент, але я ще не знаю чи буду його вчити і користуватись ним, тож поки я 
            зроблю наступні приклади так як мені дозволяють мої знання. 

            <GridExamples />
        </>
    );
}