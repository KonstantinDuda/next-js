import React from "react";
import Link from "next/link";
import Image from "next/image";
import style from "@/app/ui/next/dash.module.css";

export default function Dashboard() {
    return (
        <>
        <h3 id="nextDashboard">Dashboard</h3>
        Продовжу вчити Next.js за <Link href="https://nextjs.org/learn/dashboard-app">цим 
        підручником</Link>. Додавання фону до проекту за допомогою next/font можна 
        реалізувати за допомогою підключення фону в окремому ts файлі та його підключення в 
        body, в layout.tsx. <Link 
        href="https://nextjs.org/learn/dashboard-app/optimizing-fonts-images#adding-a-primary-font">
            Ознайомитись з цим підходом</Link>. Це буде зручно якщо ви маєте бажання 
        зробити якусь сторінку з іншим шрифтом. Якщо ж ви хочете зробити щоб відрізнялась
        якась вкладка в сторінці (подібно до частин коду на цьому сайті), це може бути 
        зручніше зробити <Link 
        href="https://w3schoolsua.github.io/css/css_font.html">за допомогою CSS</Link>. 
        public - це коренева тека для збереження зображень. Я вже користувався цим коли писав 
        про <Link href="/html#htmlPictures"> зображення в HTML</Link>. Стандартний підхід 
        потребую певних налаштувань. Next.js пропонує власне рішення: next/image. Це 
        компонент що має певні налаштування, оптимізацію. Враховуючи що я не користуюсь 
        Tilewind, спробую реалізувати описане в підручнику, але за допомогою CSS. Просто 
        щоб дізнатись чи відрізнятиметься використання next/image від стандартного тегу. 
        <Image src="/hero-desktop.png" width={1000} height={760} alt="hero desktop" 
            className={style.pcImage}/>
        <Image src="/hero-mobile.png" width={560} height={620} alt="hero mobile" 
            className={style.mobImage}/>
        Переконався що немає різниці. Але це для мене немає різниці, а розробники певне щось 
        там зробили, тож певне краще користуватись саме цим компонентом. Можливо ця думка 
        актуальна і для роботи зі шрифтами. <Link target="_blank" rel="noreferrer"
        href="https://nextjs.org/learn/dashboard-app/navigating-between-pages#pattern-showing-active-links">
        clsx виглядає цікаво</Link>. Дозволяє додавати стилі безпосередньо в тег але в 
        залежності від умови. Але використати його щоб виділяти поточну сторінку в 
        меню навігації у мене не вийшло. Далі в підручнику йде навчання по використанню 
        баз данних, а саме postgres. Я маю невеликий досвід по роботі з SQLite з мобільним 
        додатком на Flutter. І на скільки я зрозумів реляційні бази даних подібні між собою.
        В свою чергу, щоб продовжити вивчання фреймворку я думаю що варту поринути і в 
        вивчення postgres. За замовчуванням кожен файл в Next.js є серверним, тому є 
        потреба писати &#39;use client&#39; в певних файлах. Тому використання SQL не має 
        бути якось ускладненим. Я вирішив навчитись базам данних тому вважаю що на цей 
        момент вже мав би вміти створювати сторінку реєстрації, авторизації. А ще планую 
        навчитись користуватись цим:  &#91;&#93; - щось пов&#39;язане з динамічною генерацією. 
        Я бачив це в підручнику по створенню блогу, та вже загубив посилання на нього...

        </>
    );
}